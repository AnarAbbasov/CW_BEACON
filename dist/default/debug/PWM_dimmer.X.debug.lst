

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Jan 23 13:59:09 2022

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	dabs	1,0x7E,2
    11  0000                     
    12                           ; Version 1.44
    13                           ; Generated 14/09/2017 GMT
    14                           ; 
    15                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F628A Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001F                     	;# 
    70  0081                     	;# 
    71  0085                     	;# 
    72  0086                     	;# 
    73  008C                     	;# 
    74  008E                     	;# 
    75  0092                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009F                     	;# 
    83  0000                     	;# 
    84  0001                     	;# 
    85  0002                     	;# 
    86  0003                     	;# 
    87  0004                     	;# 
    88  0005                     	;# 
    89  0006                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  008C                     	;# 
   111  008E                     	;# 
   112  0092                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009F                     	;# 
   120  0006                     _PORTBbits	set	6
   121  0015                     _CCPR1L	set	21
   122  0012                     _T2CONbits	set	18
   123  0017                     _CCP1CON	set	23
   124  0092                     _PR2	set	146
   125  0433                     _TRISB3	set	1075
   126  0430                     _TRISB0	set	1072
   127                           
   128                           ; #config settings
   129  0000                     
   130                           	psect	cinit
   131  07FE                     start_initialization:	
   132  07FE                     __initialization:	
   133  07FE                     end_of_initialization:	
   134                           ;End of C runtime variable initialization code
   135                           
   136  07FE                     __end_of__initialization:	
   137  07FE  0183               	clrf	3
   138  07FF  2FCC               	ljmp	_main	;jump to C main() function
   139                           
   140                           	psect	cstackCOMMON
   141  0070                     __pcstackCOMMON:	
   142  0070                     ?_InitPWM:	
   143  0070                     ??_InitPWM:	
   144                           ; 1 bytes @ 0x0
   145                           
   146  0070                     ?_generateTone:	
   147                           ; 1 bytes @ 0x0
   148                           
   149  0070                     ??_generateTone:	
   150                           ; 1 bytes @ 0x0
   151                           
   152  0070                     ?_SetPWMDutyCycle:	
   153                           ; 1 bytes @ 0x0
   154                           
   155  0070                     ?_main:	
   156                           ; 1 bytes @ 0x0
   157                           
   158  0070                     SetPWMDutyCycle@DutyCycle:	
   159                           ; 1 bytes @ 0x0
   160                           
   161                           
   162                           ; 2 bytes @ 0x0
   163  0070                     	ds	2
   164  0072                     ??_SetPWMDutyCycle:	
   165                           
   166                           ; 1 bytes @ 0x2
   167  0072                     	ds	2
   168  0074                     ??_main:	
   169                           
   170                           ; 1 bytes @ 0x4
   171  0074                     	ds	2
   172  0076                     main@pwmcyc:	
   173                           
   174                           ; 2 bytes @ 0x6
   175  0076                     	ds	2
   176                           
   177                           	psect	maintext
   178  07CC                     __pmaintext:	
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 19 in file "pwm_main.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;  pwmcyc          2    6[COMMON] int 
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : B00/0
   195 ;;		On exit  : 0/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   198 ;;      Params:         0       0       0       0
   199 ;;      Locals:         2       0       0       0
   200 ;;      Temps:          2       0       0       0
   201 ;;      Totals:         4       0       0       0
   202 ;;Total ram usage:        4 bytes
   203 ;; Hardware stack levels required when called:    1
   204 ;; This function calls:
   205 ;;		_InitPWM
   206 ;;		_SetPWMDutyCycle
   207 ;;		_generateTone
   208 ;; This function is called by:
   209 ;;		Startup code after reset
   210 ;; This function uses a non-reentrant model
   211 ;;
   212                           
   213                           
   214                           ;psect for function _main
   215  07CC                     _main:	
   216                           
   217                           ;pwm_main.c: 21: InitPWM();
   218                           
   219                           ;incstack = 0
   220                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   221  07CC  279B               	fcall	_InitPWM
   222                           
   223                           ;pwm_main.c: 23: int pwmcyc=0;
   224  07CD  01F6               	clrf	main@pwmcyc
   225  07CE  01F7               	clrf	main@pwmcyc+1
   226                           
   227                           ;pwm_main.c: 25: TRISB0=0;
   228  07CF  1683               	bsf	3,5	;RP0=1, select bank1
   229  07D0  1303               	bcf	3,6	;RP1=0, select bank1
   230  07D1  1006               	bcf	6,0	;volatile
   231                           
   232                           ;pwm_main.c: 26: generateTone();
   233  07D2  2797               	fcall	_generateTone
   234  07D3                     l579:	
   235                           ;pwm_main.c: 27: while(1)
   236                           
   237                           
   238                           ;pwm_main.c: 28: {
   239                           ;pwm_main.c: 29: SetPWMDutyCycle(pwmcyc);
   240  07D3  0877               	movf	main@pwmcyc+1,w
   241  07D4  00F1               	movwf	SetPWMDutyCycle@DutyCycle+1
   242  07D5  0876               	movf	main@pwmcyc,w
   243  07D6  00F0               	movwf	SetPWMDutyCycle@DutyCycle
   244  07D7  27AB               	fcall	_SetPWMDutyCycle
   245                           
   246                           ;pwm_main.c: 31: _delay((unsigned long)((150)*(4000000/4000.0)));
   247  07D8  30C3               	movlw	195
   248  07D9  00F5               	movwf	??_main+1
   249  07DA  30CD               	movlw	205
   250  07DB  00F4               	movwf	??_main
   251  07DC                     u57:	
   252  07DC  0BF4               	decfsz	??_main,f
   253  07DD  2FDC               	goto	u57
   254  07DE  0BF5               	decfsz	??_main+1,f
   255  07DF  2FDC               	goto	u57
   256                           
   257                           ;pwm_main.c: 32: if (pwmcyc>0x041A){
   258  07E0  0877               	movf	main@pwmcyc+1,w
   259  07E1  3A80               	xorlw	128
   260  07E2  00FF               	movwf	127
   261  07E3  3084               	movlw	132
   262  07E4  027F               	subwf	127,w
   263  07E5  1D03               	skipz
   264  07E6  2FE9               	goto	u45
   265  07E7  301B               	movlw	27
   266  07E8  0276               	subwf	main@pwmcyc,w
   267  07E9                     u45:	
   268  07E9  1C03               	skipc
   269  07EA  2FED               	goto	l587
   270                           
   271                           ;pwm_main.c: 33: pwmcyc=0;}
   272  07EB  01F6               	clrf	main@pwmcyc
   273  07EC  01F7               	clrf	main@pwmcyc+1
   274  07ED                     l587:	
   275                           
   276                           ;pwm_main.c: 35: pwmcyc=pwmcyc+50;
   277  07ED  0876               	movf	main@pwmcyc,w
   278  07EE  3E32               	addlw	50
   279  07EF  00F6               	movwf	main@pwmcyc
   280  07F0  0877               	movf	main@pwmcyc+1,w
   281  07F1  1803               	skipnc
   282  07F2  3E01               	addlw	1
   283  07F3  3E00               	addlw	0
   284  07F4  00F7               	movwf	main@pwmcyc+1
   285                           
   286                           ;pwm_main.c: 36: _delay((unsigned long)((150)*(4000000/4000.0)));
   287  07F5  30C3               	movlw	195
   288  07F6  00F5               	movwf	??_main+1
   289  07F7  30CD               	movlw	205
   290  07F8  00F4               	movwf	??_main
   291  07F9                     u67:	
   292  07F9  0BF4               	decfsz	??_main,f
   293  07FA  2FF9               	goto	u67
   294  07FB  0BF5               	decfsz	??_main+1,f
   295  07FC  2FF9               	goto	u67
   296  07FD  2FD3               	goto	l579
   297  07FE                     __end_of_main:	
   298                           ;pwm_main.c: 38: }
   299                           ;pwm_main.c: 39: return;
   300                           
   301                           
   302                           	psect	text1
   303  0797                     __ptext1:	
   304 ;; *************** function _generateTone *****************
   305 ;; Defined at:
   306 ;;		line 24 in file "functions.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;		None
   309 ;; Auto vars:     Size  Location     Type
   310 ;;		None
   311 ;; Return value:  Size  Location     Type
   312 ;;                  1    wreg      void 
   313 ;; Registers used:
   314 ;;		None
   315 ;; Tracked objects:
   316 ;;		On entry : 0/0
   317 ;;		On exit  : 0/0
   318 ;;		Unchanged: 0/0
   319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   320 ;;      Params:         0       0       0       0
   321 ;;      Locals:         0       0       0       0
   322 ;;      Temps:          0       0       0       0
   323 ;;      Totals:         0       0       0       0
   324 ;;Total ram usage:        0 bytes
   325 ;; Hardware stack levels used:    1
   326 ;; This function calls:
   327 ;;		Nothing
   328 ;; This function is called by:
   329 ;;		_main
   330 ;;		_dot
   331 ;;		_dash
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335                           
   336                           ;psect for function _generateTone
   337  0797                     _generateTone:	
   338                           
   339                           ;functions.c: 27: T2CONbits.TMR2ON=1;
   340                           
   341                           ;incstack = 0
   342                           ; Regs used in _generateTone: []
   343  0797  1283               	bcf	3,5	;RP0=0, select bank0
   344  0798  1303               	bcf	3,6	;RP1=0, select bank0
   345  0799  1512               	bsf	18,2	;volatile
   346  079A  0008               	return
   347  079B                     __end_of_generateTone:	
   348                           
   349                           	psect	text2
   350  07AB                     __ptext2:	
   351 ;; *************** function _SetPWMDutyCycle *****************
   352 ;; Defined at:
   353 ;;		line 33 in file "functions.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;  DutyCycle       2    0[COMMON] unsigned int 
   356 ;; Auto vars:     Size  Location     Type
   357 ;;		None
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, status,2, status,0
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   367 ;;      Params:         2       0       0       0
   368 ;;      Locals:         0       0       0       0
   369 ;;      Temps:          2       0       0       0
   370 ;;      Totals:         4       0       0       0
   371 ;;Total ram usage:        4 bytes
   372 ;; Hardware stack levels used:    1
   373 ;; This function calls:
   374 ;;		Nothing
   375 ;; This function is called by:
   376 ;;		_main
   377 ;; This function uses a non-reentrant model
   378 ;;
   379                           
   380                           
   381                           ;psect for function _SetPWMDutyCycle
   382  07AB                     _SetPWMDutyCycle:	
   383                           
   384                           ;functions.c: 36: CCPR1L=DutyCycle>>2;
   385                           
   386                           ;incstack = 0
   387                           ; Regs used in _SetPWMDutyCycle: [wreg+status,2+status,0]
   388  07AB  0871               	movf	SetPWMDutyCycle@DutyCycle+1,w
   389  07AC  00F3               	movwf	??_SetPWMDutyCycle+1
   390  07AD  0870               	movf	SetPWMDutyCycle@DutyCycle,w
   391  07AE  00F2               	movwf	??_SetPWMDutyCycle
   392  07AF  1003               	clrc
   393  07B0  0CF3               	rrf	??_SetPWMDutyCycle+1,f
   394  07B1  0CF2               	rrf	??_SetPWMDutyCycle,f
   395  07B2  1003               	clrc
   396  07B3  0CF3               	rrf	??_SetPWMDutyCycle+1,f
   397  07B4  0CF2               	rrf	??_SetPWMDutyCycle,f
   398  07B5  0872               	movf	??_SetPWMDutyCycle,w
   399  07B6  1283               	bcf	3,5	;RP0=0, select bank0
   400  07B7  1303               	bcf	3,6	;RP1=0, select bank0
   401  07B8  0095               	movwf	21	;volatile
   402                           
   403                           ;functions.c: 37: CCP1CON&=0xCF;
   404  07B9  30CF               	movlw	207
   405  07BA  00F2               	movwf	??_SetPWMDutyCycle
   406  07BB  0872               	movf	??_SetPWMDutyCycle,w
   407  07BC  0597               	andwf	23,f	;volatile
   408                           
   409                           ;functions.c: 38: CCP1CON|=(0x30&(DutyCycle<<4));
   410  07BD  0870               	movf	SetPWMDutyCycle@DutyCycle,w
   411  07BE  00F2               	movwf	??_SetPWMDutyCycle
   412  07BF  3003               	movlw	3
   413  07C0                     u35:	
   414  07C0  1003               	clrc
   415  07C1  0DF2               	rlf	??_SetPWMDutyCycle,f
   416  07C2  3EFF               	addlw	-1
   417  07C3  1D03               	skipz
   418  07C4  2FC0               	goto	u35
   419  07C5  1003               	clrc
   420  07C6  0D72               	rlf	??_SetPWMDutyCycle,w
   421  07C7  3930               	andlw	48
   422  07C8  00F3               	movwf	??_SetPWMDutyCycle+1
   423  07C9  0873               	movf	??_SetPWMDutyCycle+1,w
   424  07CA  0497               	iorwf	23,f	;volatile
   425  07CB  0008               	return
   426  07CC                     __end_of_SetPWMDutyCycle:	
   427                           
   428                           	psect	text3
   429  079B                     __ptext3:	
   430 ;; *************** function _InitPWM *****************
   431 ;; Defined at:
   432 ;;		line 11 in file "functions.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;		None
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   446 ;;      Params:         0       0       0       0
   447 ;;      Locals:         0       0       0       0
   448 ;;      Temps:          0       0       0       0
   449 ;;      Totals:         0       0       0       0
   450 ;;Total ram usage:        0 bytes
   451 ;; Hardware stack levels used:    1
   452 ;; This function calls:
   453 ;;		Nothing
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           
   460                           ;psect for function _InitPWM
   461  079B                     _InitPWM:	
   462                           
   463                           ;functions.c: 14: TRISB3=0;
   464                           
   465                           ;incstack = 0
   466                           ; Regs used in _InitPWM: [wreg]
   467  079B  1683               	bsf	3,5	;RP0=1, select bank1
   468  079C  1303               	bcf	3,6	;RP1=0, select bank1
   469  079D  1186               	bcf	6,3	;volatile
   470                           
   471                           ;functions.c: 15: CCP1CON=0x0C;
   472  079E  300C               	movlw	12
   473  079F  1283               	bcf	3,5	;RP0=0, select bank0
   474  07A0  1303               	bcf	3,6	;RP1=0, select bank0
   475  07A1  0097               	movwf	23	;volatile
   476                           
   477                           ;functions.c: 16: PR2=0x5E;
   478  07A2  305E               	movlw	94
   479  07A3  1683               	bsf	3,5	;RP0=1, select bank1
   480  07A4  1303               	bcf	3,6	;RP1=0, select bank1
   481  07A5  0092               	movwf	18	;volatile
   482                           
   483                           ;functions.c: 17: T2CONbits.T2CKPS0=1;
   484  07A6  1283               	bcf	3,5	;RP0=0, select bank0
   485  07A7  1303               	bcf	3,6	;RP1=0, select bank0
   486  07A8  1412               	bsf	18,0	;volatile
   487                           
   488                           ;functions.c: 18: T2CONbits.T2CKPS1=0;
   489  07A9  1092               	bcf	18,1	;volatile
   490  07AA  0008               	return
   491  07AB                     __end_of_InitPWM:	
   492  007E                     btemp	set	126	;btemp
   493  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SetPWMDutyCycle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     166
                                              4 COMMON     4     4      0
                            _InitPWM
                    _SetPWMDutyCycle
                       _generateTone
 ---------------------------------------------------------------------------------
 (1) _generateTone                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPWMDutyCycle                                      4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _InitPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPWM
   _SetPWMDutyCycle
   _generateTone

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Jan 23 13:59:09 2022

             __CFG_CP$OFF 0000                        u35 07C0                        u45 07E9  
                      u57 07DC                        u67 07F9               __CFG_LVP$ON 0000  
                     l587 07ED                       l579 07D3                       _PR2 0092  
            __CFG_CPD$OFF 0000              __CFG_FOSC$HS 0000            ??_generateTone 0070  
                    _main 07CC                      btemp 007E             __CFG_BOREN$ON 0000  
                    start 0000             __CFG_MCLRE$ON 0000           __end_of_InitPWM 07AB  
         _SetPWMDutyCycle 07AB                     ?_main 0070             __CFG_WDTE$OFF 0000  
SetPWMDutyCycle@DutyCycle 0070                     status 0003                     wtemp0 007E  
         __initialization 07FE              __end_of_main 07FE                    ??_main 0074  
                  _CCPR1L 0015                    _TRISB0 0430                    _TRISB3 0433  
               ??_InitPWM 0070   __end_of_SetPWMDutyCycle 07CC            __CFG_PWRTE$OFF 0000  
    __end_of_generateTone 079B   __end_of__initialization 07FE            __pcstackCOMMON 0070  
        ?_SetPWMDutyCycle 0070                __pmaintext 07CC                   _CCP1CON 0017  
                 _InitPWM 079B     __size_of_generateTone 0004                   __ptext1 0797  
                 __ptext2 07AB                   __ptext3 079B                 _T2CONbits 0012  
    end_of_initialization 07FE              _generateTone 0797                 _PORTBbits 0006  
              main@pwmcyc 0076       start_initialization 07FE                 ___latbits 0000  
                ?_InitPWM 0070  __size_of_SetPWMDutyCycle 0021          __size_of_InitPWM 0010  
       ??_SetPWMDutyCycle 0072             __size_of_main 0032             ?_generateTone 0070  
